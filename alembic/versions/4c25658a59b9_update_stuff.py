"""Update stuff

Revision ID: 4c25658a59b9
Revises: 
Create Date: 2025-01-14 19:12:16.909517

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "4c25658a59b9"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    pass
    # ### commands auto generated by Alembic - please adjust! ###
    # op.drop_table("order")
    # op.drop_table("merchant")
    # op.drop_table("storageblock")
    # op.drop_table("staff")
    # op.drop_table("address")
    # op.drop_table("package")
    # op.drop_table("account")
    # op.drop_table("packagerate")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "packagerate",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "base_rate",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "base_weight",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "oversize_rate",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "overweight_rate_per_kg",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "fragile_rate",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "urgent_rate",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name="packagerate_pkey"),
    )
    op.create_table(
        "account",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("name", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("hashed_password", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("phone", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("email", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("address_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("street", sa.TEXT(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["address_id"], ["address.id"], name="account_address_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="account_pkey"),
        sa.UniqueConstraint("email", name="account_email_key"),
        sa.UniqueConstraint("phone", name="account_phone_key"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "package",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("merchant_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("block_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("address_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("description", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("street", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column("phone", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "width",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "height",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "length",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "weight",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("is_fragile", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column("is_urgent", sa.BOOLEAN(), autoincrement=False, nullable=True),
        sa.Column("status", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "shipping_cost",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "cod_cost",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["merchant_id"], ["merchant.account_id"], name="package_merchant_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", "merchant_id", name="package_pkey"),
    )
    op.create_table(
        "address",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("province", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("district", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("commune", sa.TEXT(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="address_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "staff",
        sa.Column("account_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("department", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("position", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("hire_date", sa.DATE(), autoincrement=False, nullable=False),
        sa.Column("access_level", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["account_id"], ["account.id"], name="staff_account_id_fkey"
        ),
        sa.PrimaryKeyConstraint("account_id", name="staff_pkey"),
    )
    op.create_table(
        "storageblock",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=True),
        sa.Column(
            "max_weight",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "max_size",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name="storageblock_pkey"),
    )
    op.create_table(
        "merchant",
        sa.Column("account_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("company_name", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column(
            "merchant_description", sa.TEXT(), autoincrement=False, nullable=True
        ),
        sa.Column("registration_date", sa.DATE(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["account_id"], ["account.id"], name="merchant_account_id_fkey"
        ),
        sa.PrimaryKeyConstraint("account_id", name="merchant_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "order",
        sa.Column("id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("merchant_id", sa.UUID(), autoincrement=False, nullable=False),
        sa.Column("staff_id", sa.UUID(), autoincrement=False, nullable=True),
        sa.Column("date", postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
        sa.Column("details", sa.TEXT(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["merchant_id"], ["merchant.account_id"], name="order_merchant_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="order_pkey"),
    )
    # ### end Alembic commands ###
